// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package portfolio

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Modal3() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"portfolio-modal modal fade\" id=\"portfolioModal3\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"close-modal\" data-bs-dismiss=\"modal\"><img src=\"assets/img/close-icon.svg\" alt=\"Close modal\"></div><div class=\"container\"><div class=\"row justify-content-center\"><div class=\"col-lg-8\"><div class=\"modal-body\"><!-- Project details--><h2 class=\"text-uppercase\">AutoParser</h2><p class=\"item-intro text-muted\">Data parsing and analysis</p><img class=\"img-fluid d-block mx-auto\" src=\"assets/img/portfolio/autoparser.jpg\" alt=\"...\"><ul class=\"list-inline\"><li><strong>Client:</strong> Auto Parts Store</li><li><strong>Category:</strong> Data Parsing & Web Scraping</li><li><strong>Backend:</strong> Golang</li><li><strong>Frontend:</strong> Server-Side Rendering (html/template package), HTMX</li><li><strong>Database:</strong> PostgreSQL</li><li><strong>Deploy:</strong> Own server</li></ul><p>The customer needed a tool for mass monitoring of prices for auto parts on several marketplaces. For this purpose, we implemented a web portal for private use by the client's employees. After uploading an excel file with a list of auto parts and setting up the parsing process, the system collects information. Thanks to the use of parallelism and proxies, we managed to make this process really fast. After collecting the data, the items whose prices are most likely to be incorrect are discarded (using the median), and the data is filtered by certain parameters, after which the collected information is displayed on a separate screen where it can also be downloaded as an excel file.</p><button class=\"btn btn-primary btn-xl text-uppercase\" data-bs-dismiss=\"modal\" type=\"button\"><i class=\"fas fa-xmark me-1\"></i> Close</button></div></div></div></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
